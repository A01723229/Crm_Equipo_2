USE CRM_DB;

-- Get Total Sales (Number of Deals)
CREATE OR ALTER PROCEDURE GetTotalSales
AS
BEGIN
    SET NOCOUNT ON;
    SELECT COUNT(*) AS totalSales FROM Deal;
END;

-- Get Total Income (Sum of Deal Values)
CREATE OR ALTER PROCEDURE GetTotalIncome
AS
BEGIN
    SET NOCOUNT ON;
    SELECT SUM(DealValue) AS totalIncome FROM Deal;
END;

-- Get Total Clients (was Customer)
CREATE OR ALTER PROCEDURE GetTotalClients
AS
BEGIN
    SET NOCOUNT ON;
    SELECT COUNT(*) AS totalClients FROM Client;
END;

-- Get Completion Rate (Completed Tasks %)
CREATE OR ALTER PROCEDURE GetCompletionRate
AS
BEGIN
    SET NOCOUNT ON;
    SELECT 
        (COUNT(CASE WHEN Status = 'Completed' THEN 1 END) * 100.0 / NULLIF(COUNT(*), 0)) 
        AS completionRate 
    FROM Task;
END;

-- Get Task Stats by Priority
CREATE OR ALTER PROCEDURE GetTaskStats
AS
BEGIN
    SET NOCOUNT ON;
    SELECT Priority, COUNT(*) AS count 
    FROM Task 
    GROUP BY Priority;
END;

-- Get Completed Tasks
CREATE OR ALTER PROCEDURE GetCompletedTasks
AS
BEGIN
    SET NOCOUNT ON;
    SELECT COUNT(*) AS completedTasks 
    FROM Task 
    WHERE Status = 'Completed';
END;

-- Get Overdue Tasks (Deadline passed, not completed)
CREATE OR ALTER PROCEDURE GetOverdueTasks
AS
BEGIN
    SET NOCOUNT ON;
    SELECT COUNT(*) AS overdueTasks 
    FROM Task 
    WHERE DeadLine < GETDATE() AND Status != 'Completed';
END;

-- Get Tasks Close to Deadline (Next 7 days)
CREATE OR ALTER PROCEDURE GetTasksCloseToDeadline
AS
BEGIN
    SET NOCOUNT ON;
    SELECT Title, DeadLine 
    FROM Task 
    WHERE DeadLine BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE());
END;

-- Get Past Deals (Latest 5 deals with Client info)
CREATE OR ALTER PROCEDURE GetPastDeals
AS
BEGIN
    SET NOCOUNT ON;
    SELECT 
        c.ClientName, 
        d.DealValue, 
        d.Comission, 
        d.DeadLine, 
        d.PaymentStatus 
    FROM Deal d 
    INNER JOIN Client c ON d.ClientID = c.ClientID
    ORDER BY d.DeadLine DESC 
    OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY;
END;

-- Get Total Commissions (Sum of commissions from completed deals)
CREATE OR ALTER PROCEDURE GetTotalCommissions
AS
BEGIN
    SET NOCOUNT ON;
    SELECT SUM(Comission) AS totalCommissions 
    FROM Deal 
    WHERE PaymentStatus = 'Completed';
END;

-- Get Commission Rate (Average commission percentage across all deals)
CREATE OR ALTER PROCEDURE GetCommissionRate
AS
BEGIN
    SET NOCOUNT ON;
    SELECT 
        (SUM(Comission) * 100.0 / NULLIF(SUM(DealValue), 0)) AS commissionRate
    FROM Deal;
END;

-- Get Pending Payments (Deals that have not been paid yet)
CREATE OR ALTER PROCEDURE GetPendingPayments
AS
BEGIN
    SET NOCOUNT ON;
    SELECT 
        c.ClientName,
        d.Comission,
        d.DeadLine AS PaymentDate
    FROM Deal d
    INNER JOIN Client c ON d.ClientID = c.ClientID
    WHERE d.PaymentStatus = 'Pending'
    ORDER BY d.DeadLine;
END;

-- Get Top Commissions (Top 5 deals with the highest commissions)
CREATE OR ALTER PROCEDURE GetTopCommissions
AS
BEGIN
    SET NOCOUNT ON;
    SELECT TOP 5 
        c.ClientName,
        d.Comission
    FROM Deal d
    INNER JOIN Client c ON d.ClientID = c.ClientID
    ORDER BY d.Comission DESC;
END;

-- Get All Deals (List of all deals with relevant client and payment info)
CREATE OR ALTER PROCEDURE GetAllDeals
AS
BEGIN
    SET NOCOUNT ON;
    SELECT 
        c.ClientName,
        d.DealValue,
        d.Comission,
        d.DeadLine AS DealDate,
        d.PaymentStatus
    FROM Deal d
    INNER JOIN Client c ON d.ClientID = c.ClientID
    ORDER BY d.DeadLine DESC;
END;

-- Get Client List (List of all clients with contact information)
CREATE OR ALTER PROCEDURE GetClientList
AS
BEGIN
    SET NOCOUNT ON;
    SELECT 
        ClientName,
        Company AS Organization,
        Telephone,
        Email
    FROM Client;
END;

-- Get Selected Client (Retrieve full details for a specific client)
CREATE OR ALTER PROCEDURE GetSelectedClient
    @ClientID INT
AS
BEGIN
    SET NOCOUNT ON;
    SELECT 
        ClientName,
        Company AS Organization,
        Telephone,
        Email,
        Description
    FROM Client
    WHERE ClientID = @ClientID;
END;

CREATE PROCEDURE GetAllTasks
AS
BEGIN
  SELECT
    TaskID,
    Title,
    [Status],
    Priority,
    Stage,
    Description,
    DeadLine,
    DealID,
    SellerID
  FROM Task;
END;

CREATE PROCEDURE GetAllProducts
AS
BEGIN
  SELECT
    ProductID,
    Name,
    Description,
    Category,
    Price
  FROM Product;
END;

--New 4/22
--Contacts
CREATE PROCEDURE AddClient
  @ClientName VARCHAR(100),
  @Company VARCHAR(50),
  @Description VARCHAR(200),
  @Telephone VARCHAR(15),
  @Email VARCHAR(50),
  @SellerID INT
AS
INSERT INTO Client (ClientName, Company, Description, Telephone, Email, SellerID)
VALUES (@ClientName, @Company, @Description, @Telephone, @Email, @SellerID);

CREATE PROCEDURE UpdateClient
  @ClientID INT,
  @ClientName VARCHAR(100),
  @Company VARCHAR(50),
  @Description VARCHAR(200),
  @Telephone VARCHAR(15),
  @Email VARCHAR(50)
AS
UPDATE Client
SET ClientName = @ClientName,
    Company = @Company,
    Description = @Description,
    Telephone = @Telephone,
    Email = @Email
WHERE ClientID = @ClientID;

CREATE PROCEDURE DeleteClient
  @ClientID INT
AS
DELETE FROM Client WHERE ClientID = @ClientID;

--Deals
CREATE PROCEDURE AddDeal
  @DealValue DECIMAL(10,2),
  @Comission DECIMAL(10,2),
  @DeadLine DATE,
  @PaymentStatus VARCHAR(30),
  @Description VARCHAR(200),
  @ClientID INT,
  @SellerID INT
AS
INSERT INTO Deal (DealValue, Comission, DeadLine, PaymentStatus, Description, ClientID, SellerID)
VALUES (@DealValue, @Comission, @DeadLine, @PaymentStatus, @Description, @ClientID, @SellerID);

CREATE PROCEDURE UpdateDeal
  @DealID INT,
  @DealValue DECIMAL(10,2),
  @Comission DECIMAL(10,2),
  @DeadLine DATE,
  @PaymentStatus VARCHAR(30),
  @Description VARCHAR(200),
  @ClientID INT
AS
UPDATE Deal
SET DealValue = @DealValue,
    Comission = @Comission,
    DeadLine = @DeadLine,
    PaymentStatus = @PaymentStatus,
    Description = @Description,
    ClientID = @ClientID
WHERE DealID = @DealID;

CREATE PROCEDURE DeleteDeal
  @DealID INT
AS
DELETE FROM Deal WHERE DealID = @DealID;

--Tasks
CREATE PROCEDURE AddTask
  @Title VARCHAR(50),
  @Status VARCHAR(20),
  @Priority VARCHAR(10),
  @Description VARCHAR(200),
  @DeadLine DATE,
  @Stage VARCHAR(20),
  @DealID INT,
  @SellerID INT
AS
INSERT INTO Task (Title, Status, Priority, Description, DeadLine, Stage, DealID, SellerID)
VALUES (@Title, @Status, @Priority, @Description, @DeadLine, @Stage, @DealID, @SellerID);

CREATE PROCEDURE UpdateTask
  @TaskID INT,
  @Title VARCHAR(50),
  @Status VARCHAR(20),
  @Priority VARCHAR(10),
  @Description VARCHAR(200),
  @DeadLine DATE,
  @Stage VARCHAR(20)
AS
UPDATE Task
SET Title = @Title,
    Status = @Status,
    Priority = @Priority,
    Description = @Description,
    DeadLine = @DeadLine,
    Stage = @Stage
WHERE TaskID = @TaskID;

CREATE PROCEDURE DeleteTask
  @TaskID INT
AS
DELETE FROM Task WHERE TaskID = @TaskID;

--Products
CREATE PROCEDURE AddProduct
  @Name VARCHAR(100),
  @Description TEXT,
  @Category VARCHAR(100),
  @Price DECIMAL(10, 2)
AS
INSERT INTO Product (Name, Description, Category, Price)
VALUES (@Name, @Description, @Category, @Price);

CREATE PROCEDURE UpdateProduct
  @ProductID INT,
  @Name VARCHAR(100),
  @Description TEXT,
  @Category VARCHAR(100),
  @Price DECIMAL(10, 2)
AS
UPDATE Product
SET Name = @Name,
    Description = @Description,
    Category = @Category,
    Price = @Price
WHERE ProductID = @ProductID;

CREATE PROCEDURE DeleteProduct
  @ProductID INT
AS
DELETE FROM Product WHERE ProductID = @ProductID;

