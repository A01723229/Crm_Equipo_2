CREATE DATABASE CRM_DB;
USE CRM_DB;

-- Customer Table
CREATE TABLE Customer (
    CustomerID INT PRIMARY KEY AUTO_INCREMENT,
    ClientName VARCHAR(30) NOT NULL,
    ClientLastName VARCHAR(30) NOT NULL,
    Email VARCHAR(30) UNIQUE NOT NULL,
    Number VARCHAR(30)
);

-- User Table
CREATE TABLE User (
    UserID INT PRIMARY KEY AUTO_INCREMENT,
    Email VARCHAR(30) UNIQUE NOT NULL,
    Password VARCHAR(255) NOT NULL,
    Role VARCHAR(10) NOT NULL,
    Company VARCHAR(20),
    OrganizationID INT,
    TaskID INT,
    FOREIGN KEY (OrganizationID) REFERENCES Organization(OrganizationID),
    FOREIGN KEY (TaskID) REFERENCES Task(TaskID)
);

-- Organization Table
CREATE TABLE Organization (
    OrganizationID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT,
    Description VARCHAR(200),
    TaskID INT,
    UserID INT,
    FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID),
    FOREIGN KEY (TaskID) REFERENCES Task(TaskID),
    FOREIGN KEY (UserID) REFERENCES User(UserID)
);

-- Deal Table
CREATE TABLE Deal (
    DealID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT,
    DealValue DECIMAL(10,2) NOT NULL,
    Comission DECIMAL(10,2) NOT NULL,
    DeadLine DATE,
    PaymentStatus VARCHAR(30),
    TaskID INT,
    UserID INT,
    FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID),
    FOREIGN KEY (TaskID) REFERENCES Task(TaskID),
    FOREIGN KEY (UserID) REFERENCES User(UserID),
    CONSTRAINT chk_deal_value CHECK (DealValue > 0),
    CONSTRAINT chk_comission CHECK (Comission >= 0)
);

-- Task Table
CREATE TABLE Task (
    TaskID INT PRIMARY KEY AUTO_INCREMENT,
    Title VARCHAR(30) NOT NULL,
    CustomerID INT,
    Status VARCHAR(10) NOT NULL,
    Priority ENUM('Critical', 'High', 'Low') NOT NULL DEFAULT 'Low',
    Description VARCHAR(100),
    DeadLine DATE,
    OrganizationID INT,
    DealID INT,
    UserID INT,
    FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID),
    FOREIGN KEY (OrganizationID) REFERENCES Organization(OrganizationID),
    FOREIGN KEY (DealID) REFERENCES Deal(DealID),
    FOREIGN KEY (UserID) REFERENCES User(UserID),
    CONSTRAINT chk_status CHECK (Status IN ('Pending', 'In Progress', 'Completed'))
);

-- Indexes for better performance
CREATE INDEX idx_customer_email ON Customer(Email);
CREATE INDEX idx_task_status ON Task(Status);
CREATE INDEX idx_task_deadline ON Task(DeadLine);
